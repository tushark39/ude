{"version":3,"sources":["logo.svg","Usurvey.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","require","uuid","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Usurvey","props","state","uid","v1","studentName","answers","answer1","answer2","answer3","isSubmited","nameSubmit","bind","asnwerSelected","questionSubmit","event","studentNameNew","this","refs","name","value","setState","console","log","target","database","ref","set","questions","onSubmit","className","type","placeholder","onChange","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc1aeb0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , { Component } from 'react';\r\nvar firebase = require('firebase');\r\nvar uuid = require('uuid');\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAmz7wtzY1raKs_r-SW8uD4E74zEbePVLg\",\r\n    authDomain: \"uservey-c06e8.firebaseapp.com\",\r\n    databaseURL: \"https://uservey-c06e8.firebaseio.com\",\r\n    projectId: \"uservey-c06e8\",\r\n    storageBucket: \"uservey-c06e8.appspot.com\",\r\n    messagingSenderId: \"351951185563\",\r\n    appId: \"1:351951185563:web:6b8a36a734fe284e42c83e\",\r\n    measurementId: \"G-7TB9N01VFV\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\nclass Usurvey extends Component {\r\n  nameSubmit(event){\r\n    var studentNameNew = this.refs.name.value;\r\n   this.setState({studentName: studentNameNew}, function (){\r\n     console.log(this.state);\r\n     \r\n   }) \r\n  }\r\n  asnwerSelected(event){\r\n  var answers =  this.state.answers;\r\n    if (event.target.name === 'answer1') {\r\n      answers.answer1 = event.target.value;\r\n    }\r\n    else if (event.target.name === 'answer2') {\r\n      answers.answer2 = event.target.value;\r\n    }\r\n    else if (event.target.name === 'answer3') {\r\n      answers.answer3 = event.target.value;\r\n    }\r\n    this.setState({answers : answers}, ()=>{\r\n      console.log(this.state);\r\n      \r\n    })\r\n  }\r\n  questionSubmit(){\r\n    firebase.database().ref('uSurvey/'+this.state.uid).set({\r\n      studentName:this.state.studentName,\r\n      answers : this.state.answers\r\n    });\r\n    this.setState({isSubmited : true});\r\n  }\r\n  constructor(props){\r\n  super(props);\r\n   \r\n  this.state = {\r\n      uid : uuid.v1(),\r\n      studentName: '',\r\n      answers: {\r\n        answer1: '',\r\n        answer2: '',\r\n        answer3: ''\r\n      },\r\n    isSubmited : false\r\n  };\r\n  this.nameSubmit = this.nameSubmit.bind(this);\r\n  this.asnwerSelected = this.asnwerSelected.bind(this);\r\n  this.questionSubmit = this.questionSubmit.bind(this);\r\n  }\r\n  render(){\r\n      var studentName;\r\n      var questions;\r\n        if (this.state.studentName === '' && this.state.isSubmited === false) {\r\n        studentName = <div>\r\n              <h1>Hey Student Let us know your Name : </h1>\r\n              <form onSubmit={this.nameSubmit}>\r\n                <input className=\"namy\" type=\"text\" placeholder=\"Enter Your Name\" ref=\"name\"/>\r\n              </form>\r\n          </div>;\r\n        }\r\n        else if (this.state.studentName !== '' && this.state.isSubmited === false) {\r\n          studentName = <h1> Hey {this.state.studentName} , Welcome to U-survey</h1>;\r\n          questions = <div>\r\n            <h2>Here are Some Question : </h2>\r\n            <form onSubmit={this.questionSubmit}>\r\n            <div className=\"card\">\r\n              <label>What kind of course you like </label> <br />\r\n                <input type=\"radio\" name=\"answer1\" value=\"Technology\" onChange={this.asnwerSelected}/>Technology\r\n                <input type=\"radio\" name=\"answer1\" value=\"Design\" onChange={this.asnwerSelected}/>Design\r\n                <input type=\"radio\" name=\"answer1\" value=\"Marketing\"onChange={this.asnwerSelected} />Marketing\r\n            </div>\r\n            <div className=\"card\">\r\n              <label>Who are you : </label> <br />\r\n                <input type=\"radio\" name=\"answer2\" value=\"Student\" onChange={this.asnwerSelected}/>Student\r\n                <input type=\"radio\" name=\"answer2\" value=\"in-Job\"onChange={this.asnwerSelected} />in-Job\r\n                <input type=\"radio\" name=\"answer2\" value=\"Looking for Job\"onChange={this.asnwerSelected} />Looking for Job\r\n            </div>\r\n            <div className=\"card\">\r\n              <label>Is onine learning helpfull : </label> <br />\r\n                <input type=\"radio\" name=\"answer3\" value=\"Yes\" onChange={this.asnwerSelected}/>Yes\r\n                <input type=\"radio\" name=\"answer3\" value=\"No\"onChange={this.asnwerSelected} />No\r\n                <input type=\"radio\" name=\"answer3\" value=\"Maybe\"onChange={this.asnwerSelected} />Maybe\r\n            </div>\r\n            <input className=\"feedback-button\" value=\"submit\" type=\"submit\" />\r\n            </form>\r\n          </div>;\r\n        }\r\n        else if (this.state.isSubmited === true ) {\r\n          questions = <h2>Thanks, {this.state.studentName} </h2>;\r\n        }\r\n      return(\r\n      <div>\r\n            {studentName}\r\n           <hr />\r\n            {questions}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Usurvey;\r\n","import React , { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Usurvey from './Usurvey';\nclass App extends Component {\nrender(){\nreturn(\n  <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>Welcom to React</p>\n      </header>\n      <Usurvey />\n    </div>\n);\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}